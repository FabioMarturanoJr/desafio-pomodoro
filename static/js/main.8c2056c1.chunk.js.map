{"version":3,"sources":["context/PomodoroContext.js","components/ProgressBar.jsx","sounds/aah.mp3","sounds/uhh.mp3","components/Howler.jsx","sounds/Applause.mp3","assets/atividade.gif","assets/intervalo.gif","components/Timer.jsx","components/TimePicker.jsx","components/OnOffSwitch.jsx","components/ResetButton.jsx","components/CompleteTask.jsx","components/MainPomodoro.jsx","context/PomodoroProvider.js","App.js","reportWebVitals.js","index.js"],"names":["pomodoroContext","createContext","ProgressBar","done","color","style","opacity","width","background","className","sonds","ahh","applause","uhh","Howler","src","playing","lessThanZero","number","undefined","BellowTen","Timer","useContext","PomodoroContext","setShowCompleteTask","hour","minute","second","activityTime","setSecond","setMinute","setHour","setActivityTime","count","setCount","setInitialTime","setInProgressTime","initialTime","inProgressTime","playSound","setPlaySound","checkedMinute","checkedHour","totalTimeInSeconds","useEffect","interval","setInterval","clearInterval","atividade","intervalo","alt","border","TimePicker","name","type","placeholder","value","max","onChange","target","Number","OnOffSwitch","showTimer","setShowTimer","pause","setPause","onClick","ResetButton","resetPomodoro","CompleteTask","closeCompleteTask","MainPomodoro","showCompleteTask","PomodoroProvider","children","useState","Provider","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c2056c1.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst pomodoroContext = createContext();\n\nexport default pomodoroContext;\n","import '../css/ProgressBar.css';\nimport React from 'react';\n\n\nconst ProgressBar = ({done, color}) => {\n\n\tconst style = {\n\t\topacity: 1,\n\t\twidth: `${done}%`,\n\t\t// background: '#d12c2c',\n\t\tbackground: color,\n\t};\n\t\t\n\treturn (\n\t\t<div className=\"progress\">\n\t\t\t<div className=\"progress-done\" style={style}>\n\t\t\t\t{/* {done}% */}\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default ProgressBar;\n","export default __webpack_public_path__ + \"static/media/aah.b3390279.mp3\";","export default __webpack_public_path__ + \"static/media/uhh.c8e3e974.mp3\";","import React from 'react'\nimport ReactHowler from 'react-howler'\n\nimport ahh from '../sounds/aah.mp3'\nimport uhh from '../sounds/uhh.mp3'\nimport applause from '../sounds/Applause.mp3'\n\nconst sonds = {\n  ahh,\n  applause,\n  uhh,\n};\n\nfunction Howler({ src }) {\n  return (\n    <ReactHowler\n      src={ sonds[src] }\n      playing={true}\n    />\n  );\n}\n\nexport default Howler;\n","export default __webpack_public_path__ + \"static/media/Applause.8c8047a3.mp3\";","export default __webpack_public_path__ + \"static/media/atividade.be4981c4.gif\";","export default __webpack_public_path__ + \"static/media/intervalo.19a182bb.gif\";","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useContext, useEffect } from \"react\";\nimport PomodoroContext from \"../context/PomodoroContext\";\nimport ProgressBar from './ProgressBar';\nimport Howler from \"./Howler\";\nimport atividade from '../assets/atividade.gif'\nimport intervalo from '../assets/intervalo.gif'\n\n\nconst lessThanZero = (number) => ((number < 0 || number === undefined) ? 0 : number);\nconst TEN = 10;\nconst BellowTen = (number) => (number < TEN ? `0${number}` : number);\n\n\nfunction Timer() {\n  const { setShowCompleteTask, hour, minute, second, activityTime, setSecond, setMinute, setHour, \n    setActivityTime, count, setCount, setInitialTime, setInProgressTime, initialTime, inProgressTime, \n    playSound, setPlaySound } = useContext(PomodoroContext);\n\n  const checkedMinute = lessThanZero(minute);\n  const checkedHour = lessThanZero(hour);\n\n  const totalTimeInSeconds = (checkedHour * 60 * 60) + (checkedMinute * 60) + second;\n\n  useEffect(() => {\n    setInitialTime(totalTimeInSeconds);\n    setInProgressTime(totalTimeInSeconds);\n\n    const TIMER_SPEED = 1000;\n    const interval = setInterval(() => {\n      setSecond(second => second - 1);\n      setCount(count => count - 1);\n      setInProgressTime(inProgressTime => inProgressTime - 1);\n    }, TIMER_SPEED);\n    return () => clearInterval(interval);\n  }, []);\n\n  useEffect(() => {\n    const MIN_SECOND = -1;\n    const MIN_MINUTE = 0;\n    const MIN_HOUR = 0;\n    const S9 = 59;\n    \n    if (count === 1 && (inProgressTime !==1)) {\n      setCount(activityTime ? 5 : 25 );\n      setActivityTime(!activityTime);\n      setPlaySound(true);\n    }\n\n    if (count === 2 || count === 24) setPlaySound(false);\n\n    switch (true) {\n      case checkedHour === MIN_HOUR && checkedMinute === MIN_MINUTE && second === MIN_SECOND:\n        setShowCompleteTask(true);\n        break;\n      case checkedMinute === MIN_MINUTE && second === MIN_SECOND:\n        setSecond(S9);\n        setMinute(S9);\n        setHour(checkedHour - 1);\n        break;\n      case second === MIN_SECOND:\n        setSecond(S9);\n        setMinute(minute => minute - 1)\n        break;\n    \n      default:\n        break;\n    }\n  }, [second]);\n\n  return (\n    <div>\n      <div>\n      { playSound && <Howler src={ activityTime ? 'uhh' : 'applause' } />}\n      <img src={ activityTime ? atividade : intervalo } alt=\"\" style={ { border: `solid 20px ${ activityTime ?'#d12c2c' : '#39aa1d'}` } }/>\n      <h2>{`${activityTime ? 'atividade' : 'intervalo'}: ${count}`}</h2>\n      <h2 className=\"timer\">\n        { `Total: ${BellowTen(checkedHour)}:${BellowTen(checkedMinute)}:${BellowTen(second)}` }\n      </h2>\n      <ProgressBar done={100 * inProgressTime / initialTime} color='#d12c2c'/>\n    </div>\n    </div>\n  );\n}\n\nexport default Timer;\n","import React, { useContext }   from 'react';\nimport PomodoroContext from \"../context/PomodoroContext\";\n\nfunction TimePicker() {\n  const { setSecond, setMinute, setHour, second, minute, hour } = useContext(PomodoroContext);\n\n  return (\n    <div className=\"timePicker\">\n      <p>Insira o tempo total da tarefa </p>\n      <input name=\"hour\" type=\"number\" placeholder=\"hora\" value={hour} max=\"59\" onChange={ ({ target: { value } }) => setHour(Number(value)) } />\n      <input name=\"minute\" type=\"number\" placeholder=\"minuto\" value={minute} max=\"59\" onChange={ ({  target: { value }  }) => setMinute(Number(value)) } />\n      <input name=\"seconds\" type=\"number\" placeholder=\"segundo\" value={second} max=\"59\" onChange={ ({ target: { value } }) => setSecond(Number(value)) } />\n    </div>\n  );\n}\n\nexport default TimePicker;\n","import React, { useContext }   from 'react';\nimport PomodoroContext from \"../context/PomodoroContext\";\n\n\nfunction OnOffSwitch() {\n  const { showTimer, setShowTimer, setPlaySound,pause, setPause } = useContext(PomodoroContext);\n  \n  const clickButton = () => {\n    setShowTimer(!showTimer);\n    pause && setPlaySound(false);\n    setPause(true);\n  };\n\n  return (\n    <button\n    type=\"button\"\n    onClick={ clickButton }\n    >\n      { showTimer ? 'Pausar Pomodoro' : 'Iniciar Pomodoro' }\n    </button>\n  );\n}\n\nexport default OnOffSwitch;\n","import React, { useContext }   from 'react';\nimport PomodoroContext from \"../context/PomodoroContext\";\n\n\nfunction ResetButton() {\n  const { resetPomodoro } = useContext(PomodoroContext);\n\n  return (\n    <button\n    type=\"button\"\n    onClick={ resetPomodoro }\n    >\n      Resetar Pomodoro\n    </button>\n  );\n}\n\nexport default ResetButton;\n","import React from \"react\";\n\nfunction CompleteTask({closeCompleteTask}) {\n  return (\n    <div className=\"CompleteTask\">\n      <div className=\"title\">\n        <h1>Parabéns você concluiu sua Tarefa !!!</h1>\n      </div>\n      <button className=\"closeCompleteTask\" onClick={closeCompleteTask}>OK</button>\n    </div>\n  );\n}\n\nexport default CompleteTask;\n","import React, { useContext }   from 'react';\nimport PomodoroContext from \"../context/PomodoroContext\";\n\nimport Timer from './Timer';\nimport TimePicker from './TimePicker';\nimport OnOffSwitch from './OnOffSwitch';\nimport ResetButton from './ResetButton';\nimport CompleteTask from \"./CompleteTask\";\n\n\nfunction MainPomodoro() {\n  const { showTimer, showCompleteTask, resetPomodoro} = useContext(PomodoroContext);\n\n  return (\n    <div className=\"mainPomodoro\">\n      { !showCompleteTask && \n        <div>\n          <h1>Timer Pomodoro</h1>\n          { showTimer && <Timer /> }\n          { !showTimer && <TimePicker /> }\n          <div className=\"buttons\">\n            <OnOffSwitch />\n            { showTimer && <ResetButton /> }      \n          </div>\n        </div>\n      }\n      {showCompleteTask && <CompleteTask closeCompleteTask={ resetPomodoro }/>}\n    </div>\n  );\n}\n\nexport default MainPomodoro;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport PomodoroContext from './PomodoroContext';\n\nfunction PomodoroProvider({ children }) {\n  const [hour, setHour] = useState();\n  const [minute, setMinute] = useState();\n  const [second, setSecond] = useState(25);\n  const [activityTime, setActivityTime] = useState(true);\n  const [showTimer, setShowTimer] = useState(false);\n  const [count, setCount] = useState(25);\n  const [initialTime, setInitialTime] = useState(0);\n  const [inProgressTime, setInProgressTime] = useState(0);\n  const [playSound, setPlaySound] = useState(true);\n  const [pause, setPause] = useState(false);\n  const [showCompleteTask, setShowCompleteTask] = useState(false);\n\n  const resetPomodoro = () => {\n    setSecond(25);\n    setMinute();\n    setHour();\n    setCount(25);\n    setActivityTime(true);\n    setShowTimer(false);\n    setPlaySound(true);\n    setPause(false);\n    setShowCompleteTask(false);\n  };\n\n  return(\n    <PomodoroContext.Provider\n      value={ {\n        hour,\n        minute,\n        second,\n        activityTime,\n        setActivityTime,\n        setSecond,\n        setMinute,\n        setHour,\n        showTimer,\n        setShowTimer,\n        count,\n        setCount,\n        initialTime,\n        setInitialTime,\n        inProgressTime,\n        setInProgressTime,\n        playSound,\n        setPlaySound,\n        pause,\n        setPause,\n        showCompleteTask,\n        setShowCompleteTask,\n        resetPomodoro,\n      } }\n    >\n      { children }\n    </PomodoroContext.Provider>\n  );\n}\n\nPomodoroProvider.propTypes = {\n  children: PropTypes.arrayOf(PropTypes.element).isRequired,\n};\n\nexport default PomodoroProvider;","import './App.css';\nimport MainPomodoro from './components/MainPomodoro';\nimport PomodoroProvider from './context/PomodoroProvider';\n\nfunction App() {\n  return (\n    <main>\n      <PomodoroProvider>\n        <MainPomodoro/>\n      </PomodoroProvider>\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}